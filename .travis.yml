os: linux
dist: trusty
language: python

jobs:
  include:
#   - os: osx
#     name: CPython2.7 Arrow 0.13.0
#     osx_image: xcode9.4
#     language: generic
#     env:
#     - TRAVIS_PYTHON_VERSION="2.7.12"
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json"
#     - ODBC_DIR=odbc_osx
#     - TURBODBC_ARROW_VERSION=0.13.0
#  Disable for now until a workaround for the detection of pyenv versions by pybind11
#  is found
#  - os: osx
#    language: generic
#    env:
#    - TRAVIS_PYTHON_VERSION="3.6.0"
#    - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json"
#    - ODBC_DIR=odbc_osx
#   - os: linux
#     name: CPython2.7 Arrow 0.13.0
#     language: python
#     python: "2.7"
#     env:
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mysql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.13.0
#   - os: linux
#     name: CPython3.5 Arrow 0.13.0
#     language: python
#     python: "3.5"
#     env:
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mysql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.13.0
#   - os: linux
#     name: CPython3.6 Arrow 0.12.1
#     language: python
#     python: "3.6"
#     env:
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mysql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.12.1
#   - os: linux
#     name: CPython3.6 Arrow 0.13.0
#     language: python
#     python: "3.6"
#     env:
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mysql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.13.0
#   - os: linux
#     name: CPython3.7 Arrow 0.13.0
#     dist: xenial
#     language: python
#     addons:
#       apt:
#         packages:
#           - unixodbc
#           - unixodbc-dev
#           - odbc-postgresql
#     services:
#       - docker
#       - postgresql
#       - mysql
#     python: "3.7"
#     env:
#     - TURBODBC_USE_CONDA=yes
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mssql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.13.0
#   - os: linux
#     name: CPython3.7 Arrow 0.14.1
#     dist: xenial
#     language: python
#     addons:
#       apt:
#         packages:
#           - unixodbc
#           - unixodbc-dev
#           - odbc-postgresql
#     services:
#       - docker
#       - postgresql
#       - mysql
#     python: "3.7"
#     env:
#     - TURBODBC_USE_CONDA=yes
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mssql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.14.1
#   - os: linux
#     name: CPython3.7 Arrow 0.15.0
#     dist: xenial
#     language: python
#     addons:
#       apt:
#         packages:
#           - unixodbc
#           - unixodbc-dev
#           - odbc-postgresql
#     services:
#       - docker
#       - postgresql
#       - mysql
#     python: "3.7"
#     env:
#     - TURBODBC_USE_CONDA=yes
#     - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mssql.json"
#     - ODBC_DIR=odbc
#     - TURBODBC_ARROW_VERSION=0.15.0
  - os: linux
    name: CPython3.8 Arrow 0.15.1
    dist: xenial
    language: python
    addons:
      apt:
        packages:
          - unixodbc
          - unixodbc-dev
          - odbc-postgresql
    services:
      - docker
      - postgresql
      - mysql
    python: "3.8"
    env:
    - TURBODBC_USE_CONDA=yes
    - TURBODBC_TEST_CONFIGURATION_FILES="query_fixtures_postgresql.json,query_fixtures_mssql.json"
    - ODBC_DIR=odbc
    - TURBODBC_ARROW_VERSION=0.15.1

services:
  - mysql
  - postgresql

addons:
  apt:
    packages:
      - unixodbc
      - unixodbc-dev
      - libboost-date-time-dev
      - libboost-locale-dev
      - libboost-system-dev
      - libmyodbc
      - odbc-postgresql=1:09.02.0100-2ubuntu1

before_install: |
  if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew install unixodbc pyenv-virtualenv pyenv-virtualenv psqlodbc
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
    pyenv install ${TRAVIS_PYTHON_VERSION}
    pyenv virtualenv ${TRAVIS_PYTHON_VERSION} turbodbc
    pyenv activate turbodbc
    python --version
    pip install pytest mock

    echo "Setting up preinstalled PostgreSQL database"
    rm -rf /usr/local/var/postgres
    initdb /usr/local/var/postgres
    pg_ctl -D /usr/local/var/postgres -w start
    createuser -s postgres
    psql -U postgres -c 'CREATE DATABASE test_db;'
    psql -U postgres -c "ALTER USER postgres WITH PASSWORD 'password';"
  fi

  if [ "${TURBODBC_USE_CONDA}" == "yes" ]; then
    MINICONDA_URL="https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh"
    wget --no-verbose -O miniconda.sh $MINICONDA_URL
    export MINICONDA=$HOME/miniconda
    bash miniconda.sh -b -p $MINICONDA
    source $MINICONDA/etc/profile.d/conda.sh
    conda config --remove channels defaults
    conda config --add channels conda-forge
    conda create -y -q -n turbodbc-dev \
        gcc_linux-64 \
        make \
        ninja \
        cmake \
        coveralls \
        gmock \
        gtest \
        gxx_linux-64 \
        mock \
        pytest \
        pytest-cov \
        python=${TRAVIS_PYTHON_VERSION} \
        unixodbc \
        boost-cpp \
        numpy \
        pyarrow=$TURBODBC_ARROW_VERSION \
        pybind11 \
        -c conda-forge
    conda activate turbodbc-dev
  fi

install: |
  if [ "${TURBODBC_USE_CONDA}" != "yes" ]; then
    pip install \
      coveralls \
      numpy==1.14.5 \
      pandas \
      pyarrow==$TURBODBC_ARROW_VERSION \
      pytest-cov \
      six \
      twine
  fi

before_script: |
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    $TRAVIS_BUILD_DIR/travis/setup_test_dbs.sh
    if [ "${TURBODBC_USE_CONDA}" == "yes" ]; then
      sudo bash -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
      sudo bash -c 'curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list > /etc/apt/sources.list.d/mssql-release.list'
      sudo apt-get update
      sudo ACCEPT_EULA=Y apt-get install msodbcsql17
      dpkg -L msodbcsql17
      echo "Creating MSSQL docker instance"
      docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=StrongPassword1' -p 1433:1433 --name mssql1 -d mcr.microsoft.com/mssql/server:2017-latest
      sleep 3  # give MSSQL time to fully boot up
      # Sometimes MSSQL is still not immediately available, in which case pause for a
      # few more seconds, see: https://github.com/microsoft/mssql-docker/issues/203
      docker exec -it mssql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword1' -Q 'SELECT @@VERSION' || sleep 10
      #$TRAVIS_BUILD_DIR/travis/check_mssql_is_available.sh mssql1 localhost SA 'StrongPassword1'
      docker exec -it mssql1 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword1' -Q 'CREATE DATABASE test_db'
    fi
  fi

script:
  - export ODBCSYSINI=${PWD}/travis/${ODBC_DIR}
  - mkdir build && cd build
  - |
    if [ "${TURBODBC_USE_CONDA}" == "yes" ]; then
      export UNIXODBC_INCLUDE_DIR=$CONDA_PREFIX/include
      # Install correct MS SQL driver path
      odbcinst -i -d -f /opt/microsoft/msodbcsql17/etc/odbcinst.ini
      cmake -DBOOST_ROOT=$CONDA_PREFIX -DBUILD_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=./dist  -DPYTHON_EXECUTABLE=`which python` -GNinja ..
      ninja
    else
      cmake -DBUILD_COVERAGE=ON -DCMAKE_INSTALL_PREFIX=./dist -DPYBIND11_PYTHON_VERSION=${TRAVIS_PYTHON_VERSION} ..
      make -j4
    fi
  - |
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        ctest -E turbodbc_arrow_unit_test --verbose
      else
        ctest --verbose
      fi
  - cd ..
  - mkdir gcov
  - cd gcov
  - gcov -l -p `find ../build -name "*.gcda"` > /dev/null
  - echo "Removing coverage for boost and C++ standard library"
  - find . -name "*#boost#*" | xargs rm
  - find . -name "*#c++#*" | xargs rm
  - cd ..
  - cd python/turbodbc_test/
  - echo "Uploading Python coverage"
  - #bash <(curl -s https://codecov.io/bash) -s $PWD/gcov/ -s $PWD -X gcov
  - cd ../..
  - echo "Uploading C++ coverage"
  - #bash <(curl -s https://codecov.io/bash) -s $PWD/gcov/ -X coveragepy -X gcov

  - cd build
  - cmake --build . --target install
  - cd dist
  - python setup.py sdist
  - |
    if [ "${TURBODBC_USE_CONDA}" != "yes" ]; then
      cd dist
      pip install *.tar.gz
      cd ..
    fi
  - rm -rf dist


# deploy:
#   skip_cleanup: true
#   provider: pypi
#   server: "https://upload.pypi.org/legacy/"
#   user: __token__
#   on:
#     tags: true
#     os: linux
#     python: "2.7"
#     branch: master
#     repo: blue-yonder/turbodbc
